package handlers

import (
	"fmt"
	"log"
	"regexp"
	"strconv"
	"strings"
	"time"

	"whereismychildren/config"
	"whereismychildren/database"
	"whereismychildren/excel"
	"whereismychildren/utils"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

type BotHandler struct {
	bot            *tgbotapi.BotAPI
	db             *database.DB
	excelProcessor *excel.ExcelProcessor
	userStates     map[int64]string
	userData       map[int64]map[string]interface{}
	config         *config.Config
}

func NewBotHandler(bot *tgbotapi.BotAPI, db *database.DB, cfg *config.Config) *BotHandler {
	return &BotHandler{
		bot:            bot,
		db:             db,
		excelProcessor: excel.NewExcelProcessor(db),
		userStates:     make(map[int64]string),
		userData:       make(map[int64]map[string]interface{}),
		config:         cfg,
	}
}

func (h *BotHandler) HandleMessage(update tgbotapi.Update) {
	if update.Message == nil {
		return
	}

	chatID := update.Message.Chat.ID
	text := update.Message.Text

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç —Å –∫–æ–º–∞–Ω–¥–æ–π /add_excel
	if update.Message.Document != nil && update.Message.Caption != "" {
		if strings.HasPrefix(update.Message.Caption, "/add_excel") {
			if !h.isAdmin(chatID) {
				h.sendError(chatID, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
				return
			}
			h.handleAddExcel(chatID, update.Message.Document)
			return
		}
	}

	// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã
	switch {
	case text == "/start":
		h.handleStart(chatID)
	case text == "–ó–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞—Ç—å —É—Ö–æ–¥":
		h.handleRecordLeave(chatID)
	case text == "–í–Ω–µ–ø–ª–∞–Ω–æ–≤–∞—è –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç—å":
		h.handleUnplannedActivity(chatID) // ‚Üê –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –≤—ã–∑–æ–≤
	case text == "–ì–¥–µ –ø–æ–¥—á–∏–Ω—ë–Ω–Ω—ã–µ":
		h.handleWhereSubordinates(chatID)
	case text == "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞":
		h.handleStatisticsMenu(chatID)
	case strings.HasPrefix(text, "/stat"):
		h.handleStatisticsCommand(chatID, text)
	case strings.HasPrefix(text, "/add_excel"):
		h.sendError(chatID, "‚ùå –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ Excel —Ñ–∞–π–ª –∫ –∫–æ–º–∞–Ω–¥–µ /add_excel")
	case h.userStates[chatID] == "waiting_activity_desc_input":
		h.processActivityDescriptionInput(chatID, text) // ‚Üê –Ω–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
	case h.userStates[chatID] == "waiting_leave_input":
		h.processLeaveInput(chatID, text)
	case h.userStates[chatID] == "waiting_unplanned_input":
		h.processUnplannedInput(chatID, text)
	case h.userStates[chatID] == "waiting_leave_time":
		h.handleLeaveTimeInput(chatID, text)
	case h.userStates[chatID] == "waiting_unplanned_details":
		h.handleUnplannedDetailsInput(chatID, text)
	default:
		h.handleFreeTextInput(chatID, text)
	}
}

func (h *BotHandler) HandleCallback(update tgbotapi.Update) {
	callback := update.CallbackQuery
	data := callback.Data
	chatID := callback.Message.Chat.ID

	switch {
	case strings.HasPrefix(data, "select_sub_"):
		subID, _ := strconv.Atoi(strings.TrimPrefix(data, "select_sub_"))
		h.handleSubordinateSelection(chatID, subID, callback.Message.MessageID)
	case data == "confirm_yes" || data == "confirm_no":
		h.handleConfirmation(chatID, data == "confirm_yes", callback.Message.MessageID)
	}
}

func (h *BotHandler) handleStart(chatID int64) {
	msg := tgbotapi.NewMessage(chatID, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è.")
	msg.ReplyMarkup = GetMainKeyboard()
	h.bot.Send(msg)
}

func (h *BotHandler) handleRecordLeave(chatID int64) {
	// –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–¥—á–∏–Ω–µ–Ω–Ω—ã—Ö
	subordinates, err := h.db.GetAllSubordinates()
	if err != nil {
		h.sendError(chatID, "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–æ–¥—á–∏–Ω–µ–Ω–Ω—ã—Ö: "+err.Error())
		return
	}

	if len(subordinates) == 0 {
		h.sendError(chatID, "‚ùå –ù–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –ø–æ–¥—á–∏–Ω–µ–Ω–Ω—ã—Ö. –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –∏—Ö —á–µ—Ä–µ–∑ Excel.")
		return
	}

	// –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∞–ª—Ñ–∞–≤–∏—Ç—É –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
	h.sortSubordinatesAlphabetically(subordinates)

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
	h.userStates[chatID] = "waiting_leave_selection"
	h.userData[chatID] = map[string]interface{}{
		"action":   "record_leave",
		"sub_list": subordinates,
	}

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –¥–ª—è –≤—ã–±–æ—Ä–∞
	msg := tgbotapi.NewMessage(chatID, "üë• –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—á–∏–Ω–µ–Ω–Ω–æ–≥–æ, –∫–æ—Ç–æ—Ä—ã–π —É—Ö–æ–¥–∏—Ç:")
	msg.ReplyMarkup = CreateSubordinateSelectionKeyboard(subordinates)
	h.bot.Send(msg)
}

func (h *BotHandler) handleUnplannedActivity(chatID int64) {
	// –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–¥—á–∏–Ω–µ–Ω–Ω—ã—Ö
	subordinates, err := h.db.GetAllSubordinates()
	if err != nil {
		h.sendError(chatID, "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–æ–¥—á–∏–Ω–µ–Ω–Ω—ã—Ö: "+err.Error())
		return
	}

	if len(subordinates) == 0 {
		h.sendError(chatID, "‚ùå –ù–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –ø–æ–¥—á–∏–Ω–µ–Ω–Ω—ã—Ö. –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –∏—Ö —á–µ—Ä–µ–∑ Excel.")
		return
	}

	// –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∞–ª—Ñ–∞–≤–∏—Ç—É –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
	h.sortSubordinatesAlphabetically(subordinates)

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤–≤–æ–¥–∞ –æ–ø–∏—Å–∞–Ω–∏—è –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
	h.userStates[chatID] = "waiting_activity_description"
	h.userData[chatID] = map[string]interface{}{
		"action":   "unplanned_activity",
		"sub_list": subordinates,
	}

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
	msg := tgbotapi.NewMessage(chatID, "üë• –í—ã–±–µ—Ä–∏—Ç–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –¥–ª—è –≤–Ω–µ–ø–ª–∞–Ω–æ–≤–æ–π –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:")
	msg.ReplyMarkup = CreateSubordinateSelectionKeyboard(subordinates)
	h.bot.Send(msg)
}

func (h *BotHandler) handleWhereSubordinates(chatID int64) {
	subordinates, err := h.db.GetAllSubordinates()
	if err != nil {
		h.sendError(chatID, "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: "+err.Error())
		return
	}

	// –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∞–ª—Ñ–∞–≤–∏—Ç—É (—Ñ–∞–º–∏–ª–∏—è, –∏–º—è)
	h.sortSubordinatesAlphabetically(subordinates)

	leaves, err := h.db.GetTodayLeaves()
	if err != nil {
		log.Printf("Error getting today leaves: %v", err)
		leaves = make(map[int]time.Time)
	}

	activities, err := h.db.GetTodayUnplannedActivities()
	if err != nil {
		log.Printf("Error getting today activities: %v", err)
		activities = make(map[int]database.UnplannedActivity)
	}

	// –õ–æ–≥–∏—Ä—É–µ–º –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
	log.Printf("Total subordinates: %d", len(subordinates))
	log.Printf("Leaves found: %d", len(leaves))
	log.Printf("Activities found: %d", len(activities))

	for id, leave := range leaves {
		log.Printf("Leave - Subordinate ID: %d, Time: %s", id, leave.Format("15:04"))
	}

	message := "üìä **–°—Ç–∞—Ç—É—Å –ø–æ–¥—á–∏–Ω–µ–Ω–Ω—ã—Ö –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:**\n\n"

	for _, sub := range subordinates {
		status := "üìç –ù–∞ –º–µ—Å—Ç–µ"

		// –°–ù–ê–ß–ê–õ–ê –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤–Ω–µ–ø–ª–∞–Ω–æ–≤—É—é –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç—å (–≤—ã—Å—à–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
		if activity, exists := activities[sub.ID]; exists {
			// –û–±—Ä–µ–∑–∞–µ–º –¥–ª–∏–Ω–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
			shortDescription := activity.Description
			if len(shortDescription) > 50 {
				shortDescription = shortDescription[:47] + "..."
			}
			status = fmt.Sprintf("üìã –í–Ω–µ–ø–ª–∞–Ω–æ–≤–∞—è (%s) - %s",
				activity.ActivityTime.Format("15:04"),
				shortDescription)
		} else if leaveTime, exists := leaves[sub.ID]; exists {
			// –ó–ê–¢–ï–ú –ø—Ä–æ–≤–µ—Ä—è–µ–º —É—Ö–æ–¥ (–Ω–∏–∑—à–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
			status = fmt.Sprintf("üö™ –£—à–µ–ª –≤ %s", leaveTime.Format("15:04"))
		}

		message += fmt.Sprintf("**%s %s %s** - %s\n",
			sub.LastName, sub.FirstName, sub.MiddleName, status)
	}

	// –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É (–∏—Å–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Å—á–µ—Ç)
	total := len(subordinates)

	// –£—á–∏—Ç—ã–≤–∞–µ–º, —á—Ç–æ –æ–¥–∏–Ω —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ –º–æ–∂–µ—Ç –±—ã—Ç—å –∏ –≤ —É—Ö–æ–¥–∞—Ö –∏ –≤ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
	// –ù–æ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –º—ã –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç—å (–≤—ã—Å—à–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
	uniqueLeftCount := 0
	uniqueActivityCount := 0

	for _, sub := range subordinates {
		if _, exists := activities[sub.ID]; exists {
			uniqueActivityCount++
		} else if _, exists := leaves[sub.ID]; exists {
			uniqueLeftCount++
		}
	}

	presentCount := total - uniqueLeftCount - uniqueActivityCount

	message += fmt.Sprintf("\nüìà **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:** –í—Å–µ–≥–æ: %d, –ù–∞ –º–µ—Å—Ç–µ: %d, –£—à–ª–∏: %d, –í–Ω–µ–ø–ª–∞–Ω–æ–≤–∞—è: %d",
		total, presentCount, uniqueLeftCount, uniqueActivityCount)

	msg := tgbotapi.NewMessage(chatID, message)
	msg.ParseMode = "Markdown"
	h.bot.Send(msg)
}

// –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ–¥—á–∏–Ω–µ–Ω–Ω—ã—Ö –ø–æ –∞–ª—Ñ–∞–≤–∏—Ç—É
func (h *BotHandler) sortSubordinatesAlphabetically(subordinates []database.Subordinate) {
	for i := 0; i < len(subordinates)-1; i++ {
		for j := i + 1; j < len(subordinates); j++ {
			// –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –ø–æ —Ñ–∞–º–∏–ª–∏–∏, –∑–∞—Ç–µ–º –ø–æ –∏–º–µ–Ω–∏
			if subordinates[i].LastName > subordinates[j].LastName ||
				(subordinates[i].LastName == subordinates[j].LastName &&
					subordinates[i].FirstName > subordinates[j].FirstName) {
				subordinates[i], subordinates[j] = subordinates[j], subordinates[i]
			}
		}
	}
}

func (h *BotHandler) handleStatisticsMenu(chatID int64) {
	msg := tgbotapi.NewMessage(chatID, "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:\n"+
		"/stat —Å–µ–≥–æ–¥–Ω—è - –∑–∞ —Å–µ–≥–æ–¥–Ω—è\n"+
		"/stat –≤—á–µ—Ä–∞ - –∑–∞ –≤—á–µ—Ä–∞\n"+
		"/stat –î–î.–ú–ú.–ì–ì–ì–ì - –∑–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –¥–∞—Ç—É\n"+
		"/stat excel - –≤—ã–≥—Ä—É–∑–∫–∞ –≤ Excel")
	h.bot.Send(msg)
}

func (h *BotHandler) handleStatisticsCommand(chatID int64, text string) {
	parts := strings.Fields(text)
	if len(parts) < 2 {
		h.sendError(chatID, "–£–∫–∞–∂–∏—Ç–µ –ø–µ—Ä–∏–æ–¥: /stat —Å–µ–≥–æ–¥–Ω—è|–≤—á–µ—Ä–∞|–î–î.–ú–ú.–ì–ì–ì–ì|excel")
		return
	}

	period := parts[1]

	if period == "excel" {
		h.handleExcelExport(chatID)
		return
	}

	var targetDate time.Time
	now := time.Now()

	switch period {
	case "—Å–µ–≥–æ–¥–Ω—è":
		targetDate = now
	case "–≤—á–µ—Ä–∞":
		targetDate = now.AddDate(0, 0, -1)
	default:
		// –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –¥–∞—Ç—É
		var err error
		targetDate, err = time.Parse("02.01.2006", period)
		if err != nil {
			targetDate, err = time.Parse("02.01.06", period)
			if err != nil {
				h.sendError(chatID, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì")
				return
			}
		}
	}

	h.showStatisticsForDate(chatID, targetDate)
}

func (h *BotHandler) showStatisticsForDate(chatID int64, date time.Time) {
	leaves, err := h.db.GetLeavesByDate(date)
	if err != nil {
		h.sendError(chatID, "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: "+err.Error())
		return
	}

	message := fmt.Sprintf("üìà **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ %s:**\n\n", date.Format("02.01.2006"))

	if len(leaves) == 0 {
		message += "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ–± —É—Ö–æ–¥–∞—Ö –∑–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å."
	} else {
		for _, item := range leaves {
			message += fmt.Sprintf("**%s %s %s** - —É—à–µ–ª –≤ %s\n",
				item.Subordinate.LastName, item.Subordinate.FirstName, item.Subordinate.MiddleName,
				item.LeaveTime.Format("15:04"))
		}
	}

	msg := tgbotapi.NewMessage(chatID, message)
	msg.ParseMode = "Markdown"
	h.bot.Send(msg)
}

func (h *BotHandler) processLeaveInput(chatID int64, text string) {
	// –£–±–∏—Ä–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
	delete(h.userStates, chatID)

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ "—Å–µ–π—á–∞—Å" –∏–ª–∏ –≤—Ä–µ–º–µ–Ω–∏
	hasTime := utils.ContainsTime(text)
	hasNow := strings.Contains(strings.ToLower(text), "—Å–µ–π—á–∞—Å")

	if !hasTime && !hasNow {
		h.sendError(chatID, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ '—Å–µ–π—á–∞—Å' –∏–ª–∏ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:MM")
		return
	}

	// –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—Ä–µ–º—è —É—Ö–æ–¥–∞
	var leaveTime time.Time
	var err error

	if hasNow {
		leaveTime = time.Now()
		// –£–±–∏—Ä–∞–µ–º "—Å–µ–π—á–∞—Å" –∏–∑ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏–º–µ–Ω–∏, –ù–ï –º–µ–Ω—è—è —Ä–µ–≥–∏—Å—Ç—Ä —Ñ–∞–º–∏–ª–∏–∏
		text = strings.ReplaceAll(text, "—Å–µ–π—á–∞—Å", "")
		text = strings.ReplaceAll(text, "–°–µ–π—á–∞—Å", "")
		text = strings.ReplaceAll(text, "–°–ï–ô–ß–ê–°", "")
	} else {
		leaveTime, err = utils.ParseTime(text)
		if err != nil {
			h.sendError(chatID, "‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –≤—Ä–µ–º–µ–Ω–∏: "+err.Error())
			return
		}
		// –£–±–∏—Ä–∞–µ–º –≤—Ä–µ–º—è –∏–∑ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏–º–µ–Ω–∏
		timeRegex := regexp.MustCompile(`\d{1,2}:\d{2}`)
		text = timeRegex.ReplaceAllString(text, "")
	}

	// –û—á–∏—â–∞–µ–º –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—Å—Ç
	cleanText := strings.TrimSpace(text)
	if cleanText == "" {
		h.sendError(chatID, "‚ùå –£–∫–∞–∂–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞")
		return
	}

	log.Printf("Processing leave: '%s' at %s", cleanText, leaveTime.Format("15:04"))

	// –ò—â–µ–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ (–æ–¥–∏–Ω–∞–∫–æ–≤–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è "—Å–µ–π—á–∞—Å" –∏ –≤—Ä–µ–º–µ–Ω–∏)
	subordinates, err := h.findExactSubordinate(cleanText, "")
	if err != nil {
		h.sendError(chatID, "‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ–¥—á–∏–Ω–µ–Ω–Ω—ã—Ö: "+err.Error())
		return
	}

	if len(subordinates) == 0 {
		h.sendError(chatID, "‚ùå –°–æ—Ç—Ä—É–¥–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω")
		return
	}

	if len(subordinates) == 1 {
		// –ï—Å–ª–∏ –æ–¥–∏–Ω –ø–æ–¥—á–∏–Ω–µ–Ω–Ω—ã–π - —Å—Ä–∞–∑—É —Ñ–∏–∫—Å–∏—Ä—É–µ–º
		h.recordLeave(chatID, subordinates[0].ID, leaveTime)
	} else {
		// –ï—Å–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ - —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º—è –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å
		action := "leave_time"
		if hasNow {
			action = "leave_now"
		}

		h.userData[chatID] = map[string]interface{}{
			"action":     action,
			"sub_list":   subordinates,
			"leave_time": leaveTime,
		}
		msg := tgbotapi.NewMessage(chatID, "–ù–∞–π–¥–µ–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤. –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω–æ–≥–æ:")
		msg.ReplyMarkup = CreateSubordinateSelectionKeyboard(subordinates)
		h.bot.Send(msg)
	}
}

func (h *BotHandler) processLeaveNow(chatID int64, text string) {
	// –£–±–∏—Ä–∞–µ–º "—Å–µ–π—á–∞—Å" –∏–∑ —Ç–µ–∫—Å—Ç–∞, –ù–ï –ø–µ—Ä–µ–≤–æ–¥—è –≤–µ—Å—å —Ç–µ–∫—Å—Ç –≤ –Ω–∏–∂–Ω–∏–π —Ä–µ–≥–∏—Å—Ç—Ä
	cleanText := strings.ReplaceAll(text, "—Å–µ–π—á–∞—Å", "")
	cleanText = strings.ReplaceAll(cleanText, "–°–µ–π—á–∞—Å", "") // –Ω–∞ —Å–ª—É—á–∞–π –∑–∞–≥–ª–∞–≤–Ω–æ–π
	cleanText = strings.TrimSpace(cleanText)

	if cleanText == "" {
		h.sendError(chatID, "‚ùå –£–∫–∞–∂–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é –∏–ª–∏ –∏–º—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞")
		return
	}

	log.Printf("Searching for subordinate with: '%s'", cleanText)

	// –ò—â–µ–º —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ (—Ä–µ–≥–∏—Å—Ç—Ä —É–∂–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π)
	subordinates, err := h.findExactSubordinate(cleanText, "")
	if err != nil {
		h.sendError(chatID, "‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ–¥—á–∏–Ω–µ–Ω–Ω—ã—Ö: "+err.Error())
		return
	}

	if len(subordinates) == 0 {
		// –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏, –ø—Ä–æ–±—É–µ–º –ø–æ–∏—Å–∫–∞—Ç—å –ø–æ —á–∞—Å—Ç–∏—á–Ω–æ–º—É —Å–æ–≤–ø–∞–¥–µ–Ω–∏—é
		subordinates, err = h.db.FindSubordinatesByName(cleanText, cleanText)
		if err != nil {
			h.sendError(chatID, "‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ–¥—á–∏–Ω–µ–Ω–Ω—ã—Ö: "+err.Error())
			return
		}
	}

	if len(subordinates) == 0 {
		h.sendError(chatID, "‚ùå –°–æ—Ç—Ä—É–¥–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω")
		return
	}

	if len(subordinates) == 1 {
		// –ï—Å–ª–∏ –æ–¥–∏–Ω –ø–æ–¥—á–∏–Ω–µ–Ω–Ω—ã–π - —Å—Ä–∞–∑—É —Ñ–∏–∫—Å–∏—Ä—É–µ–º
		h.recordLeave(chatID, subordinates[0].ID, time.Now())
	} else {
		// –ï—Å–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ - –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å
		h.userData[chatID] = map[string]interface{}{
			"action":   "leave_now",
			"sub_list": subordinates,
		}
		msg := tgbotapi.NewMessage(chatID, "–ù–∞–π–¥–µ–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤. –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω–æ–≥–æ:")
		msg.ReplyMarkup = CreateSubordinateSelectionKeyboard(subordinates)
		h.bot.Send(msg)
	}
}
func (h *BotHandler) findExactSubordinate(searchTerm1, searchTerm2 string) ([]database.Subordinate, error) {
	// –ï—Å–ª–∏ –æ–±–∞ —Ç–µ—Ä–º–∏–Ω–∞ –ø—É—Å—Ç—ã–µ
	if searchTerm1 == "" && searchTerm2 == "" {
		return nil, fmt.Errorf("–Ω–µ —É–∫–∞–∑–∞–Ω—ã –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–∏—Å–∫–∞")
	}

	// –ï—Å–ª–∏ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ç–µ—Ä–º–∏–Ω - –∏—Å–ø–æ–ª—å–∑—É–µ–º —É–ª—É—á—à–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫
	if searchTerm2 == "" {
		return h.db.FindSubordinatesBySingleTerm(searchTerm1)
	}

	// –ï—Å–ª–∏ –¥–≤–∞ —Ç–µ—Ä–º–∏–Ω–∞ - –ø–µ—Ä–≤—ã–π —Å—á–∏—Ç–∞–µ–º —Ñ–∞–º–∏–ª–∏–µ–π, –≤—Ç–æ—Ä–æ–π –∏–º–µ–Ω–µ–º
	return h.db.FindSubordinatesByFullName(searchTerm1, searchTerm2)
}

func (h *BotHandler) processLeaveWithTime(chatID int64, text string) {
	// –ü–∞—Ä—Å–∏–º –≤—Ä–µ–º—è
	leaveTime, err := utils.ParseTime(text)
	if err != nil {
		h.sendError(chatID, "‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –≤—Ä–µ–º–µ–Ω–∏: "+err.Error())
		return
	}

	// –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º—è (—É–±–∏—Ä–∞–µ–º –≤—Ä–µ–º—è –∏–∑ —Ç–µ–∫—Å—Ç–∞)
	timeRegex := regexp.MustCompile(`\d{1,2}:\d{2}`)
	cleanText := timeRegex.ReplaceAllString(text, "")
	cleanText = strings.TrimSpace(cleanText)

	if cleanText == "" {
		h.sendError(chatID, "‚ùå –£–∫–∞–∂–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞")
		return
	}

	// –ò—â–µ–º —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
	subordinates, err := h.findExactSubordinate(cleanText, "")
	if err != nil {
		h.sendError(chatID, "‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ–¥—á–∏–Ω–µ–Ω–Ω—ã—Ö: "+err.Error())
		return
	}

	if len(subordinates) == 0 {
		h.sendError(chatID, "‚ùå –°–æ—Ç—Ä—É–¥–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω")
		return
	}

	if len(subordinates) == 1 {
		// –ï—Å–ª–∏ –æ–¥–∏–Ω –ø–æ–¥—á–∏–Ω–µ–Ω–Ω—ã–π - —Å—Ä–∞–∑—É —Ñ–∏–∫—Å–∏—Ä—É–µ–º
		h.recordLeave(chatID, subordinates[0].ID, leaveTime)
	} else {
		// –ï—Å–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ - —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º—è –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å
		h.userData[chatID] = map[string]interface{}{
			"action":     "leave_time",
			"sub_list":   subordinates,
			"leave_time": leaveTime,
		}
		msg := tgbotapi.NewMessage(chatID, "–ù–∞–π–¥–µ–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤. –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω–æ–≥–æ:")
		msg.ReplyMarkup = CreateSubordinateSelectionKeyboard(subordinates)
		h.bot.Send(msg)
	}
}

func (h *BotHandler) processUnplannedInput(chatID int64, text string) {
	// –£–±–∏—Ä–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
	delete(h.userStates, chatID)

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –∏–ª–∏ "—Å–µ–π—á–∞—Å"
	hasTime := utils.ContainsTime(text)
	hasNow := strings.Contains(strings.ToLower(text), "—Å–µ–π—á–∞—Å")

	if !hasTime && !hasNow {
		h.sendError(chatID, "–£–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:MM –∏–ª–∏ '—Å–µ–π—á–∞—Å'")
		return
	}

	// –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—Ä–µ–º—è –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
	var activityTime time.Time
	var err error
	var searchText string

	if hasNow {
		activityTime = time.Now()
		// –ù–∞—Ö–æ–¥–∏–º –ø–æ–∑–∏—Ü–∏—é "—Å–µ–π—á–∞—Å" –≤ —Ç–µ–∫—Å—Ç–µ
		nowIndex := strings.Index(strings.ToLower(text), "—Å–µ–π—á–∞—Å")
		if nowIndex == -1 {
			h.sendError(chatID, "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã")
			return
		}
		// –ë–µ—Ä–µ–º —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ "—Å–µ–π—á–∞—Å" –∫–∞–∫ –æ–ø–∏—Å–∞–Ω–∏–µ
		descriptionStart := nowIndex + len("—Å–µ–π—á–∞—Å")
		searchText = strings.TrimSpace(text[:nowIndex])           // —Ñ–∞–º–∏–ª–∏—è –¥–æ "—Å–µ–π—á–∞—Å"
		description := strings.TrimSpace(text[descriptionStart:]) // –æ–ø–∏—Å–∞–Ω–∏–µ –ø–æ—Å–ª–µ "—Å–µ–π—á–∞—Å"

		if searchText == "" {
			h.sendError(chatID, "–£–∫–∞–∂–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞")
			return
		}

		if description == "" {
			h.sendError(chatID, "–£–∫–∞–∂–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏")
			return
		}

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É –æ–ø–∏—Å–∞–Ω–∏—è
		if len(description) > 1000 {
			description = description[:1000]
		}

		// –ò—â–µ–º –ø–æ–¥—á–∏–Ω–µ–Ω–Ω—ã—Ö –∏ —Ñ–∏–∫—Å–∏—Ä—É–µ–º –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç—å
		h.processUnplannedActivity(chatID, searchText, activityTime, description)
		return

	} else {
		// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –≤—Ä–µ–º–µ–Ω–∏
		activityTime, err = utils.ParseTime(text)
		if err != nil {
			h.sendError(chatID, "–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –≤—Ä–µ–º–µ–Ω–∏: "+err.Error())
			return
		}

		// –ù–∞—Ö–æ–¥–∏–º –≤—Ä–µ–º—è –≤ —Ç–µ–∫—Å—Ç–µ
		timeRegex := regexp.MustCompile(`\d{1,2}:\d{2}`)
		timeMatch := timeRegex.FindStringIndex(text)
		if timeMatch == nil {
			h.sendError(chatID, "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≤—Ä–µ–º—è –≤ —Ç–µ–∫—Å—Ç–µ")
			return
		}

		// –ë–µ—Ä–µ–º —Ç–µ–∫—Å—Ç –¥–æ –≤—Ä–µ–º–µ–Ω–∏ –∫–∞–∫ —Ñ–∞–º–∏–ª–∏—è, –ø–æ—Å–ª–µ –≤—Ä–µ–º–µ–Ω–∏ –∫–∞–∫ –æ–ø–∏—Å–∞–Ω–∏–µ
		searchText = strings.TrimSpace(text[:timeMatch[0]])   // —Ñ–∞–º–∏–ª–∏—è –¥–æ –≤—Ä–µ–º–µ–Ω–∏
		description := strings.TrimSpace(text[timeMatch[1]:]) // –æ–ø–∏—Å–∞–Ω–∏–µ –ø–æ—Å–ª–µ –≤—Ä–µ–º–µ–Ω–∏

		if searchText == "" {
			h.sendError(chatID, "–£–∫–∞–∂–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞")
			return
		}

		if description == "" {
			h.sendError(chatID, "–£–∫–∞–∂–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏")
			return
		}

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É –æ–ø–∏—Å–∞–Ω–∏—è
		if len(description) > 1000 {
			description = description[:1000]
		}

		// –ò—â–µ–º –ø–æ–¥—á–∏–Ω–µ–Ω–Ω—ã—Ö –∏ —Ñ–∏–∫—Å–∏—Ä—É–µ–º –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç—å
		h.processUnplannedActivity(chatID, searchText, activityTime, description)
		return
	}
}
func (h *BotHandler) processUnplannedActivity(chatID int64, searchText string, activityTime time.Time, description string) {
	// –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–ª—å–∫–æ —Ñ–∞–º–∏–ª–∏—é (–ø–µ—Ä–≤–æ–µ —Å–ª–æ–≤–æ)
	parts := strings.Fields(searchText)
	if len(parts) == 0 {
		h.sendError(chatID, "–£–∫–∞–∂–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞")
		return
	}

	lastName := parts[0]

	// –ò—â–µ–º –ø–æ–¥—á–∏–Ω–µ–Ω–Ω—ã—Ö –ø–æ –¢–û–ß–ù–û–ô —Ñ–∞–º–∏–ª–∏–∏
	subordinates, err := h.findExactSubordinate(lastName, "")
	if err != nil {
		h.sendError(chatID, "–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ–¥—á–∏–Ω–µ–Ω–Ω—ã—Ö: "+err.Error())
		return
	}

	if len(subordinates) == 0 {
		// –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –ø–æ —Ç–æ—á–Ω–æ–º—É —Å–æ–≤–ø–∞–¥–µ–Ω–∏—é, –ø—Ä–æ–±—É–µ–º —á–∞—Å—Ç–∏—á–Ω—ã–π –ø–æ–∏—Å–∫
		subordinates, err = h.db.FindSubordinatesByName(lastName, "")
		if err != nil {
			h.sendError(chatID, "–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ–¥—á–∏–Ω–µ–Ω–Ω—ã—Ö: "+err.Error())
			return
		}
	}

	if len(subordinates) == 0 {
		h.sendError(chatID, "–°–æ—Ç—Ä—É–¥–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω")
		return
	}

	if len(subordinates) == 1 {
		// –ï—Å–ª–∏ –æ–¥–∏–Ω –ø–æ–¥—á–∏–Ω–µ–Ω–Ω—ã–π - —Å—Ä–∞–∑—É —Ñ–∏–∫—Å–∏—Ä—É–µ–º
		h.recordUnplannedActivity(chatID, subordinates[0].ID, activityTime, description)
	} else {
		// –ï—Å–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ - —Å–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å
		h.userData[chatID] = map[string]interface{}{
			"action":        "unplanned",
			"sub_list":      subordinates,
			"activity_time": activityTime,
			"description":   description,
		}
		msg := tgbotapi.NewMessage(chatID, "–ù–∞–π–¥–µ–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤. –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω–æ–≥–æ:")
		msg.ReplyMarkup = CreateSubordinateSelectionKeyboard(subordinates)
		h.bot.Send(msg)
	}
}
func (h *BotHandler) recordLeave(chatID int64, subordinateID int, leaveTime time.Time) {
	log.Printf("Recording leave for subordinate %d at %s", subordinateID, leaveTime.Format("15:04"))

	// –£–î–ê–õ–Ø–ï–ú –ö–û–ù–§–õ–ò–ö–¢–£–Æ–©–ò–ï –ó–ê–ü–ò–°–ò
	err := h.db.RemoveConflictingRecords(subordinateID, leaveTime)
	if err != nil {
		log.Printf("Error removing conflicting records: %v", err)
		h.sendError(chatID, "‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø–∏—Å–∏: "+err.Error())
		return
	}

	// –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å —É—Ö–æ–¥–∞
	err = h.db.AddLeave(subordinateID, leaveTime)
	if err != nil {
		log.Printf("Error adding leave: %v", err)
		h.sendError(chatID, "‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ —É—Ö–æ–¥–∞: "+err.Error())
		return
	}

	sub, _ := h.db.GetSubordinateByID(subordinateID)
	msg := tgbotapi.NewMessage(chatID, fmt.Sprintf(
		"‚úÖ %s %s —É—à—ë–ª –≤ %s (–ú–°–ö)",
		sub.LastName, sub.FirstName, leaveTime.Format("15:04")))
	h.bot.Send(msg)
}

func (h *BotHandler) recordUnplannedActivity(chatID int64, subordinateID int, activityTime time.Time, description string) {
	// –£–î–ê–õ–Ø–ï–ú –ö–û–ù–§–õ–ò–ö–¢–£–Æ–©–ò–ï –ó–ê–ü–ò–°–ò
	err := h.db.RemoveConflictingRecords(subordinateID, activityTime)
	if err != nil {
		h.sendError(chatID, "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø–∏—Å–∏: "+err.Error())
		return
	}

	// –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
	err = h.db.AddUnplannedActivity(subordinateID, activityTime, description)
	if err != nil {
		h.sendError(chatID, "–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: "+err.Error())
		return
	}

	sub, _ := h.db.GetSubordinateByID(subordinateID)
	msg := tgbotapi.NewMessage(chatID, fmt.Sprintf(
		"‚úÖ –î–ª—è %s %s –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–∞ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ %s: %s",
		sub.LastName, sub.FirstName, activityTime.Format("15:04"), description))
	h.bot.Send(msg)
}

func (h *BotHandler) getExistingLeaveToday(subordinateID int) (time.Time, error) {
	leaves, err := h.db.GetTodayLeaves()
	if err != nil {
		return time.Time{}, err
	}

	if leaveTime, exists := leaves[subordinateID]; exists {
		return leaveTime, nil
	}

	return time.Time{}, nil
}

func (h *BotHandler) getExistingActivityToday(subordinateID int) (*database.UnplannedActivity, error) {
	activities, err := h.db.GetTodayUnplannedActivities()
	if err != nil {
		return nil, err
	}

	if activity, exists := activities[subordinateID]; exists {
		return &activity, nil
	}

	return nil, nil
}

func (h *BotHandler) handleSubordinateSelection(chatID int64, subID int, messageID int) {
	// –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
	deleteMsg := tgbotapi.NewDeleteMessage(chatID, messageID)
	h.bot.Send(deleteMsg)

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	userState, exists := h.userStates[chatID]
	// –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω—é—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é userData, —Ç–∞–∫ –∫–∞–∫ –æ–Ω–∞ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ —ç—Ç–æ–º –∫–æ–¥–µ
	_, dataExists := h.userData[chatID]

	if !exists || !dataExists {
		h.sendError(chatID, "‚ùå –î–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏ —É—Å—Ç–∞—Ä–µ–ª–∏")
		return
	}

	// –ü–æ–ª—É—á–∞–µ–º –º–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è
	mskTime := utils.GetMoscowTime()

	switch userState {
	case "waiting_leave_selection":
		// –î–ª—è —É—Ö–æ–¥–∞ - —Å—Ä–∞–∑—É —Ñ–∏–∫—Å–∏—Ä—É–µ–º
		h.recordLeave(chatID, subID, mskTime)
		delete(h.userStates, chatID)
		delete(h.userData, chatID)

	case "waiting_activity_description":
		// –î–ª—è –≤–Ω–µ–ø–ª–∞–Ω–æ–≤–æ–π –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ - –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ
		h.userData[chatID] = map[string]interface{}{
			"subordinate_id": subID,
			"activity_time":  mskTime,
		}
		h.userStates[chatID] = "waiting_activity_desc_input"

		msg := tgbotapi.NewMessage(chatID, "üìù –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≤–Ω–µ–ø–ª–∞–Ω–æ–≤–æ–π –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:")
		h.bot.Send(msg)

	default:
		h.sendError(chatID, "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ")
		delete(h.userStates, chatID)
		delete(h.userData, chatID)
	}
}

func (h *BotHandler) handleConfirmation(chatID int64, confirmed bool, messageID int) {
	// –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
	deleteMsg := tgbotapi.NewDeleteMessage(chatID, messageID)
	h.bot.Send(deleteMsg)

	if !confirmed {
		msg := tgbotapi.NewMessage(chatID, "‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
		h.bot.Send(msg)
		delete(h.userData, chatID)
		return
	}

	userData, exists := h.userData[chatID]
	if !exists {
		h.sendError(chatID, "–î–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏ —É—Å—Ç–∞—Ä–µ–ª–∏")
		return
	}

	action := userData["action"].(string)
	subordinateID := userData["subordinate_id"].(int)

	switch action {
	case "confirm_leave":
		leaveTime := userData["leave_time"].(time.Time)
		err := h.db.AddLeave(subordinateID, leaveTime)
		if err != nil {
			h.sendError(chatID, "–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —É—Ö–æ–¥–∞: "+err.Error())
			return
		}
		sub, _ := h.db.GetSubordinateByID(subordinateID)
		msg := tgbotapi.NewMessage(chatID, fmt.Sprintf(
			"‚úÖ –£—Ö–æ–¥ –¥–ª—è %s %s –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞ %s",
			sub.LastName, sub.FirstName, leaveTime.Format("15:04")))
		h.bot.Send(msg)

	case "confirm_unplanned":
		activityTime := userData["activity_time"].(time.Time)
		description := userData["description"].(string)
		err := h.db.AddUnplannedActivity(subordinateID, activityTime, description)
		if err != nil {
			h.sendError(chatID, "–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: "+err.Error())
			return
		}
		sub, _ := h.db.GetSubordinateByID(subordinateID)
		msg := tgbotapi.NewMessage(chatID, fmt.Sprintf(
			"‚úÖ –î–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–ª—è %s %s –æ–±–Ω–æ–≤–ª–µ–Ω–∞: %s - %s",
			sub.LastName, sub.FirstName, activityTime.Format("15:04"), description))
		h.bot.Send(msg)
	}

	delete(h.userData, chatID)
}

func (h *BotHandler) handleFreeTextInput(chatID int64, text string) {
	// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –∫–æ–º–∞–Ω–¥—ã
	if strings.Contains(text, "—Å–µ–π—á–∞—Å") || utils.ContainsTime(text) {
		h.processLeaveInput(chatID, text)
	} else {
		msg := tgbotapi.NewMessage(chatID, "–ù–µ –ø–æ–Ω–∏–º–∞—é –∫–æ–º–∞–Ω–¥—É. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –∏–ª–∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã.")
		h.bot.Send(msg)
	}
}

func (h *BotHandler) sendError(chatID int64, message string) {
	msg := tgbotapi.NewMessage(chatID, "‚ùå "+message)
	h.bot.Send(msg)
}

func truncateString(s string, maxLength int) string {
	if len(s) <= maxLength {
		return s
	}
	return s[:maxLength-3] + "..."
}
func (h *BotHandler) isAdmin(chatID int64) bool {
	return h.config.IsAdmin(chatID)
}

func (h *BotHandler) checkAdmin(chatID int64) bool {
	if !h.isAdmin(chatID) {
		h.sendError(chatID, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
		return false
	}
	return true
}
func normalizeSearchTerm(term string) string {
	if term == "" {
		return ""
	}

	// –ü—Ä–∏–≤–æ–¥–∏–º –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É
	lower := strings.ToLower(term)

	// –ü–µ—Ä–≤—É—é –±—É–∫–≤—É –¥–µ–ª–∞–µ–º –∑–∞–≥–ª–∞–≤–Ω–æ–π
	if len(lower) > 0 {
		return strings.ToUpper(lower[:1]) + lower[1:]
	}

	return lower
}
func (h *BotHandler) processActivityDescriptionInput(chatID int64, text string) {
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
	if h.userStates[chatID] != "waiting_activity_desc_input" {
		h.sendError(chatID, "‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ")
		return
	}

	userData, exists := h.userData[chatID]
	if !exists {
		h.sendError(chatID, "‚ùå –î–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏ —É—Å—Ç–∞—Ä–µ–ª–∏")
		delete(h.userStates, chatID)
		return
	}

	subordinateID, ok1 := userData["subordinate_id"].(int)
	activityTime, ok2 := userData["activity_time"].(time.Time)

	if !ok1 || !ok2 {
		h.sendError(chatID, "‚ùå –û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å–µ—Å—Å–∏–∏")
		delete(h.userStates, chatID)
		delete(h.userData, chatID)
		return
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –ø—É—Å—Ç–æ–µ
	description := strings.TrimSpace(text)
	if description == "" {
		h.sendError(chatID, "‚ùå –û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
		return
	}

	// –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –æ–ø–∏—Å–∞–Ω–∏—è
	if len(description) > 1000 {
		description = description[:1000]
	}

	// –§–∏–∫—Å–∏—Ä—É–µ–º –≤–Ω–µ–ø–ª–∞–Ω–æ–≤—É—é –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç—å
	h.recordUnplannedActivity(chatID, subordinateID, activityTime, description)

	// –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
	delete(h.userStates, chatID)
	delete(h.userData, chatID)
}
